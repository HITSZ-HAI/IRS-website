import {
    TemplateInstance,
    NodeTemplatePart
} from '@github/template-parts';
const templates = new WeakMap();
const renderedTemplates = new WeakMap();
const renderedTemplateInstances = new WeakMap();
export class TemplateResult {
    constructor(strings, values, processor) {
        this.strings = strings;
        this.values = values;
        this.processor = processor;
    }
    static setCSPTrustedTypesPolicy(policy) {
        TemplateResult.cspTrustedTypesPolicy = policy;
    }
    get template() {
        var _a, _b;
        if (templates.has(this.strings)) {
            return templates.get(this.strings);
        } else {
            const template = document.createElement('template');
            const end = this.strings.length - 1;
            const html = this.strings.reduce((str, cur, i) => str + cur + (i < end ? `{{ ${i} }}` : ''), '');
            const trustedHtml = (_b = (_a = TemplateResult.cspTrustedTypesPolicy) === null || _a === void 0 ? void 0 : _a.createHTML(html)) !== null && _b !== void 0 ? _b : html;
            template.innerHTML = trustedHtml;
            templates.set(this.strings, template);
            return template;
        }
    }
    renderInto(element) {
        const template = this.template;
        if (renderedTemplates.get(element) !== template) {
            renderedTemplates.set(element, template);
            const instance = new TemplateInstance(template, this.values, this.processor);
            renderedTemplateInstances.set(element, instance);
            if (element instanceof NodeTemplatePart) {
                element.replace(...instance.children);
            } else {
                element.appendChild(instance);
            }
            return;
        }
        renderedTemplateInstances.get(element).update(this.values);
    }
}
TemplateResult.cspTrustedTypesPolicy = null;
//# sourceMappingURL=template-result.js.map